#!/usr/bin/env python
import os
import sys
import termenu

GITBIN = "/usr/bin/git"

class GitRunner(object):
    def __init__(self, args):
        self.args = args

    def run(self):
        if not self.args or "--help" in self.args or self._free_args(self.args[1:]):
            return self._exec_git(self.args)
        self.command = self.args[0]
        self.args = self.args[1:]
        func = "_do_" + self.command.replace("-", "_")
        if hasattr(self, func):
            return getattr(self, func)()
        else:
            self._exec_default()

    def _exec_default(self):
        return self._exec_git([self.command] + self.args)

    def _exec_git(self, args):
        command = " ".join([GITBIN] + self._quote_args(args))
        return os.system(command)

    def _free_args(self, args):
        return [arg for arg in args if not arg.startswith("-")]

    def _options(self, args):
        return set([arg for arg in args if arg.startswith("-")])

    def _quote_args(self, args):
        return ['"%s"' % arg if " " in arg else arg for arg in args]

    # Getters for lists of items to show in a menu

    def _list_branches(self):
        branches = os.popen("%s branch" % GITBIN).readlines()
        branches = [b.strip("*").strip() for b in branches]
        return list(sorted(branches))

    def _list_status_files(self, workspaceStatuses="?M ", indexStatuses="?M "):
        lines = os.popen("%s status --porcelain" % GITBIN).readlines()
        files = [line[2:].strip() for line in lines if line[1] in workspaceStatuses or line[0] in indexStatuses]
        return list(files)

    def _list_commits(self):
        lines = os.popen("%s log --oneline" % GITBIN).readlines()
        lines = map(str.strip, lines)
        return lines

    def _command_with_menu(self, listFunc, multiSelect):
        options = listFunc()
        if not options:
            return
        selected = termenu.show_menu("", options, multiSelect=multiSelect)
        if not selected:
            return
        if not multiSelect:
            selected = [selected]
        return self._exec_git([self.command] + self.args + selected)

    def _command_with_hash(self):
        options = self._list_commits()
        if not options:
            return
        selected = termenu.show_menu("", options, multiSelect=False, columns=1, rows=15)
        if not selected:
            return
        selected = selected.split(" ", 1)[0]
        return self._exec_git([self.command] + self.args + [selected])

    # Command handlers

    def _do_checkout(self):
        return self._command_with_menu(self._list_branches, multiSelect=False)

    def _do_add(self):
        return self._command_with_menu(lambda: self._list_status_files("UM?", ""), multiSelect=True)

    def _do_reset(self):
        return self._command_with_menu(lambda: self._list_status_files("", "MA"), multiSelect=True)

    def _do_show(self):
        return self._command_with_hash()

    def _do_branch(self):
        options = self._options(self.args)
        if "-D" in options or "-d" in options:
            return self._command_with_menu(self._list_branches, multiSelect=True)
        else:
            return self._exec_default()

if __name__ == "__main__":
    ret = GitRunner(sys.argv[1:]).run()
    sys.exit(ret or 127)
